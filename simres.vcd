$date
	Fri Jun 28 21:07:19 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ProcessorTestbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 $ writedata [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' instr [31:0] $end
$var wire 1 ( datawrite $end
$var wire 32 ) dataaddr [31:0] $end
$scope module dmem $end
$var wire 6 * addr [5:0] $end
$var wire 1 ! clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 ( we $end
$var wire 32 , wd [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 - addr [5:0] $end
$var wire 32 . rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 32 / instr [31:0] $end
$var wire 32 0 readdata [31:0] $end
$var wire 1 " reset $end
$var wire 1 1 zero $end
$var wire 32 2 writedata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 32 4 pc [31:0] $end
$var wire 1 ( memwrite $end
$var wire 1 5 memtoreg $end
$var wire 1 6 lui $end
$var wire 1 7 dojump $end
$var wire 1 8 dobranch $end
$var wire 5 9 destreg [4:0] $end
$var wire 1 : alusrcbimm $end
$var wire 32 ; aluout [31:0] $end
$var wire 3 < alucontrol [2:0] $end
$var wire 1 = OrImm $end
$scope module decoder $end
$var wire 32 > instr [31:0] $end
$var wire 1 1 zero $end
$var wire 6 ? op [5:0] $end
$var wire 6 @ funct [5:0] $end
$var reg 1 = OrImm $end
$var reg 3 A alucontrol [2:0] $end
$var reg 1 : alusrcbimm $end
$var reg 5 B destreg [4:0] $end
$var reg 1 8 dobranch $end
$var reg 1 7 dojump $end
$var reg 1 6 lui $end
$var reg 1 5 memtoreg $end
$var reg 1 ( memwrite $end
$var reg 1 3 regwrite $end
$upscope $end
$scope module dp $end
$var wire 1 = OrImm $end
$var wire 3 C alucontrol [2:0] $end
$var wire 1 : alusrcbimm $end
$var wire 1 ! clk $end
$var wire 5 D destreg [4:0] $end
$var wire 1 8 dobranch $end
$var wire 32 E instr [31:0] $end
$var wire 1 7 jump $end
$var wire 1 6 lui $end
$var wire 1 5 memtoreg $end
$var wire 32 F readdata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 1 " reset $end
$var wire 32 G writedata [31:0] $end
$var wire 1 1 zero $end
$var wire 32 H srcbimm [31:0] $end
$var wire 32 I srcb [31:0] $end
$var wire 32 J srca [31:0] $end
$var wire 32 K signimm [31:0] $end
$var wire 32 L result [31:0] $end
$var wire 32 M pc [31:0] $end
$var wire 32 N aluout [31:0] $end
$scope module alu $end
$var wire 3 O alucontrol [2:0] $end
$var wire 32 P b [31:0] $end
$var wire 32 Q a [31:0] $end
$var reg 32 R hi [31:0] $end
$var reg 32 S lo [31:0] $end
$var reg 32 T result [31:0] $end
$var reg 67 U temp [66:0] $end
$var reg 1 1 zero $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 5 V ra1 [4:0] $end
$var wire 5 W ra2 [4:0] $end
$var wire 5 X wa3 [4:0] $end
$var wire 32 Y wd3 [31:0] $end
$var wire 1 3 we3 $end
$var wire 32 Z rd2 [31:0] $end
$var wire 32 [ rd1 [31:0] $end
$upscope $end
$scope module pcenv $end
$var wire 1 ! clk $end
$var wire 1 8 dobranch $end
$var wire 1 7 dojump $end
$var wire 26 \ jumptarget [25:0] $end
$var wire 32 ] progcounter [31:0] $end
$var wire 1 " reset $end
$var wire 32 ^ nextpc [31:0] $end
$var wire 32 _ incpc [31:0] $end
$var wire 32 ` branchpc [31:0] $end
$var wire 32 a branchoffset [31:0] $end
$var reg 32 b pc [31:0] $end
$scope module pcbranch $end
$var wire 32 c b [31:0] $end
$var wire 1 d cin $end
$var wire 32 e y [31:0] $end
$var wire 1 f cout $end
$var wire 32 g a [31:0] $end
$upscope $end
$scope module pcinc $end
$var wire 32 h a [31:0] $end
$var wire 32 i b [31:0] $end
$var wire 1 j cin $end
$var wire 32 k y [31:0] $end
$var wire 1 l cout $end
$upscope $end
$upscope $end
$scope module se $end
$var wire 1 = OrImm $end
$var wire 16 m a [15:0] $end
$var wire 1 6 lui $end
$var wire 32 n y [31:0] $end
$var reg 32 o out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111011 o
b1111011 n
b1111011 m
0l
b10000000000000000000100 k
0j
b100 i
b10000000000000000000000 h
b10000000000000000000100 g
0f
b10000000000000111110000 e
0d
b111101100 c
b10000000000000000000000 b
b1111011 a
b10000000000000111110000 `
b10000000000000000000100 _
b10000000000000000000100 ^
b10000000000000000000000 ]
b10000000001111011 \
b0 [
b11001010111111101011101010111110 Z
b1111011 Y
b1 X
b1 W
b0 V
bx U
b1111011 T
bx S
bx R
b0 Q
b1111011 P
b10 O
b1111011 N
b10000000000000000000000 M
b1111011 L
b1111011 K
b0 J
b11001010111111101011101010111110 I
b1111011 H
b11001010111111101011101010111110 G
bx F
b100100000000010000000001111011 E
b1 D
b10 C
b1 B
b10 A
b111011 @
b1001 ?
b100100000000010000000001111011 >
0=
b10 <
b1111011 ;
1:
b1 9
08
07
06
05
b10000000000000000000000 4
13
b11001010111111101011101010111110 2
01
bx 0
b100100000000010000000001111011 /
b100100000000010000000001111011 .
b0 -
b11001010111111101011101010111110 ,
bx +
b11110 *
b1111011 )
0(
b100100000000010000000001111011 '
b10000000000000000000000 &
bx %
b11001010111111101011101010111110 $
b100000 #
1"
1!
$end
#2
0!
#4
b1111011 $
b1111011 ,
b1111011 2
b1111011 G
b1111011 I
b1111011 Z
1!
#5
0"
#6
0!
#8
b111001000 L
b111001000 Y
b110010 *
b111001000 )
b111001000 ;
b111001000 N
b111001000 T
b11100100000 c
b111001000 H
b111001000 P
b10000000000000000001000 ^
b111001000 K
b111001000 a
b111001000 n
b111001000 o
b11001010111111101011101010111110 $
b11001010111111101011101010111110 ,
b11001010111111101011101010111110 2
b11001010111111101011101010111110 G
b11001010111111101011101010111110 I
b11001010111111101011101010111110 Z
b10000000000011100101000 `
b10000000000011100101000 e
b10 9
b10 B
b10 D
b10 X
b1000 @
b100000000111001000 \
b111001000 m
b10 W
b10000000000000000001000 _
b10000000000000000001000 g
b10000000000000000001000 k
b100100000000100000000111001000 '
b100100000000100000000111001000 .
b100100000000100000000111001000 /
b100100000000100000000111001000 >
b100100000000100000000111001000 E
b1 -
b10000000000000000000100 &
b10000000000000000000100 4
b10000000000000000000100 M
b10000000000000000000100 ]
b10000000000000000000100 b
b10000000000000000000100 h
1!
#10
0!
#12
b1100100 c
b10000000000000000001100 ^
b0 R
b1101101100011000 S
b1101101100011000 U
b11001 K
b11001 a
b11001 n
b11001 o
b1111011 J
b1111011 Q
b1111011 [
b10000000000000001110000 `
b10000000000000001110000 e
b11 <
b11 A
b11 C
b11 O
0:
b0 9
b0 B
b0 D
b0 X
b0 ?
b11001 @
b1000100000000000011001 \
b11001 m
b1 V
b111001000 $
b111001000 ,
b111001000 2
b111001000 G
b111001000 I
b111001000 Z
b10000000000000000001100 _
b10000000000000000001100 g
b10000000000000000001100 k
b1000100000000000011001 '
b1000100000000000011001 .
b1000100000000000011001 /
b1000100000000000011001 >
b1000100000000000011001 E
b10 -
b10000000000000000001000 &
b10000000000000000001000 4
b10000000000000000001000 M
b10000000000000000001000 ]
b10000000000000000001000 b
b10000000000000000001000 h
1!
#14
0!
#16
b1101101100011000 L
b1101101100011000 Y
b110 *
b110000001001000 c
b0 H
b0 P
b10000000000000000010000 ^
b1101101100011000 )
b1101101100011000 ;
b1101101100011000 N
b1101101100011000 T
b1100000010010 K
b1100000010010 a
b1100000010010 n
b1100000010010 o
b0 J
b0 Q
b0 [
b0 $
b0 ,
b0 2
b0 G
b0 I
b0 Z
b10000000110000001011000 `
b10000000110000001011000 e
b101 <
b101 A
b101 C
b101 O
b11 9
b11 B
b11 D
b11 X
b10010 @
b1100000010010 \
b1100000010010 m
b0 V
b0 W
b10000000000000000010000 _
b10000000000000000010000 g
b10000000000000000010000 k
b1100000010010 '
b1100000010010 .
b1100000010010 /
b1100000010010 >
b1100000010010 E
b11 -
b10000000000000000001100 &
b10000000000000000001100 4
b10000000000000000001100 M
b10000000000000000001100 ]
b10000000000000000001100 b
b10000000000000000001100 h
1!
#18
0!
#20
11
b0 L
b0 Y
b0 *
b1000000001000000 c
b10000000000000000010100 ^
b0 )
b0 ;
b0 N
b0 T
b10000000010000 K
b10000000010000 a
b10000000010000 n
b10000000010000 o
b10000001000000001010100 `
b10000001000000001010100 e
b100 <
b100 A
b100 C
b100 O
b100 9
b100 B
b100 D
b100 X
b10000 @
b10000000010000 \
b10000000010000 m
b10000000000000000010100 _
b10000000000000000010100 g
b10000000000000000010100 k
b10000000010000 '
b10000000010000 .
b10000000010000 /
b10000000010000 >
b10000000010000 E
b100 -
b10000000000000000010000 &
b10000000000000000010000 4
b10000000000000000010000 M
b10000000000000000010000 ]
b10000000000000000010000 b
b10000000000000000010000 h
1!
#21
b100 #
